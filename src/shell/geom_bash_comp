_geom()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}
    local line=${COMP_LINE}
    COMPREPLY=()
    if [[ "$line" == *"geom " ]]; then
        COMPREPLY=($(compgen -W 'angle arc arcpoly area boundary buffer centroid combine contains convexHull coordinates count countpoints coveredby covers crosses delaunay densify difference dimension disjoint distance distanceline draw drawbase64 dump ellipse endpoint envelope equals fromwkb get grid hausdorffdistance interiorpoint interpolatepoint intersection intersects isccw isclosed isempty isrectangle isring issimple isvalid iswithindistance kochsnowflake linemerge list locatepoint mincircle minclearance mindiameter minrect nearestpoints node normalize octagonalenvelope overlaps placepoint pointatangle polygonize project random randomwalk rectangle reduceprecision reflect relate reverse rotate scale shear sierpinskicarpet similarity simplify sinestar slice snap split spoke squircle startpoint subline supercircle symdifference text touches towkb translate type union voronoi within' -- $cur))
    elif [[ "$line" == *"geom angle "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry -t --type' -- $cur))
    elif [[ "$line" == *"geom arc "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --startAngle -c --center -d -degrees -e --angleExtent -g --geometry -h --height -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom arcpoly "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --startAngle -c --center -d --degrees -e --angleExtent -g --geometry -h --height -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom area "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom boundary "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom buffer "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --endCapStyle -d --distance -g --geometry -q --quadrantSegments -s --singleSided' -- $cur))
    elif [[ "$line" == *"geom centroid "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom combine "* ]]; then
        COMPREPLY=($(compgen -W '--help' -- $cur))
    elif [[ "$line" == *"geom contains "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom convexHull "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom coordinates "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -u --unique' -- $cur))
    elif [[ "$line" == *"geom count "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom countpoints "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom coveredby "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom covers "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom crosses "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom delaunay "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --conforming -g --geometry' -- $cur))
    elif [[ "$line" == *"geom densify "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --distance -g --geometry' -- $cur))
    elif [[ "$line" == *"geom difference "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom dimension "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom disjoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom distance "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom distanceline "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom draw "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --background -c --drawCoords -e --envelope -f --file -g --geometry -h --height -i --backgroundImage -l --fill -m --shape -o --fillOpacity -r --strokeWidth -s --stroke -t --strokeOpacity -w --width -z --size' -- $cur))
    elif [[ "$line" == *"geom drawbase64 "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --background -c --drawCoords -e --envelope -g --geometry -h --height -i --backgroundImage -l --fill -m --shape -o --fillOpacity -p --prefix -r --strokeWidth -s --stroke -t --strokeOpacity -w --width -y --type -z --size' -- $cur))
    elif [[ "$line" == *"geom dump "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom ellipse "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --center -g --geometry -h --height -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom endpoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom envelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --expandBy -g --geometry' -- $cur))
    elif [[ "$line" == *"geom equals "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -l --tolerance -o --otherGeometry -t --type' -- $cur))
    elif [[ "$line" == *"geom fromwkb "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --wkb' -- $cur))
    elif [[ "$line" == *"geom get "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -n --index' -- $cur))
    elif [[ "$line" == *"geom grid "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --columns -g --geometry -r --rows' -- $cur))
    elif [[ "$line" == *"geom hausdorffdistance "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom interiorpoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom interpolatepoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -p --position' -- $cur))
    elif [[ "$line" == *"geom intersection "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom intersects "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom isccw "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom isclosed "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom isempty "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom isrectangle "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom isring "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom issimple "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom isvalid "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -t --type' -- $cur))
    elif [[ "$line" == *"geom iswithindistance "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --distance -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom kochsnowflake "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -n --number' -- $cur))
    elif [[ "$line" == *"geom linemerge "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom list "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --description' -- $cur))
    elif [[ "$line" == *"geom locatepoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom mincircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom minclearance "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom mindiameter "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom minrect "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom nearestpoints "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom node "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -n --number' -- $cur))
    elif [[ "$line" == *"geom normalize "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom octagonalenvelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom overlaps "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom placepoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom pointatangle "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --angle -d --distance -g --geometry' -- $cur))
    elif [[ "$line" == *"geom polygonize "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --full -g --geometry' -- $cur))
    elif [[ "$line" == *"geom project "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -s --source -t --target' -- $cur))
    elif [[ "$line" == *"geom random "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --constrained -f --gutterFraction -g --geometry -n --number -r --gridded' -- $cur))
    elif [[ "$line" == *"geom randomwalk "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --angle -d --distance -g --geometry -n --number -p --probability' -- $cur))
    elif [[ "$line" == *"geom rectangle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --center -g --geometry -h --height -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom reduceprecision "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -p --pointWise -r --removeCollapsed -s --scale -t --type' -- $cur))
    elif [[ "$line" == *"geom reflect "* ]]; then
        COMPREPLY=($(compgen -W '--help -0 --x0 -1 --y0 -2 --x1 -3 --y1 -g --geometry' -- $cur))
    elif [[ "$line" == *"geom relate "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -m --matrix -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom reverse "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom rotate "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --cosine -g --geometry -s --sine -t --theta -x --xCoordinate -y --yCoordinate' -- $cur))
    elif [[ "$line" == *"geom scale "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -s --xscale -t --yscale -x --xcoordinate -y --ycoordinate' -- $cur))
    elif [[ "$line" == *"geom shear "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -x --xDistance -y -yDistance' -- $cur))
    elif [[ "$line" == *"geom sierpinskicarpet "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -n --number' -- $cur))
    elif [[ "$line" == *"geom similarity "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --algorithm -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom simplify "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --algorithm -d --distance -g --geometry' -- $cur))
    elif [[ "$line" == *"geom sinestar "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --center -g --geometry -h --height -l --armLengthRatio -n --numberOfArms -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom slice "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --end -g --geometry -s --start' -- $cur))
    elif [[ "$line" == *"geom snap "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --distance -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom split "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom spoke "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom squircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --center -g --geometry -h --height -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom startpoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom subline "* ]]; then
        COMPREPLY=($(compgen -W '--help -e -g --geometry -s' -- $cur))
    elif [[ "$line" == *"geom supercircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --center -g --geometry -h --height -o --power -p --numberOfPoints -r --rotation -w --width' -- $cur))
    elif [[ "$line" == *"geom symdifference "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom text "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --fontName -s --pointSize -t --text' -- $cur))
    elif [[ "$line" == *"geom touches "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom towkb "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --byte-order -d --dimension -g --geometry' -- $cur))
    elif [[ "$line" == *"geom translate "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -x --xDistance -y --yDistance' -- $cur))
    elif [[ "$line" == *"geom type "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom union "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom voronoi "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry' -- $cur))
    elif [[ "$line" == *"geom within "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -o --otherGeometry' -- $cur))
    elif [[ "$line" == *"geom"[[:space:]][[:alpha:]]* ]]; then
        local nm="${line##*geom }"
        if [[ "angle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'angle'))
        fi
        if [[ "arc" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'arc'))
        fi
        if [[ "arcpoly" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'arcpoly'))
        fi
        if [[ "area" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'area'))
        fi
        if [[ "boundary" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'boundary'))
        fi
        if [[ "buffer" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'buffer'))
        fi
        if [[ "centroid" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'centroid'))
        fi
        if [[ "combine" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'combine'))
        fi
        if [[ "contains" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'contains'))
        fi
        if [[ "convexHull" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'convexHull'))
        fi
        if [[ "coordinates" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'coordinates'))
        fi
        if [[ "count" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'count'))
        fi
        if [[ "countpoints" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'countpoints'))
        fi
        if [[ "coveredby" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'coveredby'))
        fi
        if [[ "covers" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'covers'))
        fi
        if [[ "crosses" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'crosses'))
        fi
        if [[ "delaunay" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'delaunay'))
        fi
        if [[ "densify" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'densify'))
        fi
        if [[ "difference" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'difference'))
        fi
        if [[ "dimension" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'dimension'))
        fi
        if [[ "disjoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'disjoint'))
        fi
        if [[ "distance" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'distance'))
        fi
        if [[ "distanceline" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'distanceline'))
        fi
        if [[ "draw" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'draw'))
        fi
        if [[ "drawbase64" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'drawbase64'))
        fi
        if [[ "dump" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'dump'))
        fi
        if [[ "ellipse" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'ellipse'))
        fi
        if [[ "endpoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'endpoint'))
        fi
        if [[ "envelope" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'envelope'))
        fi
        if [[ "equals" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'equals'))
        fi
        if [[ "fromwkb" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'fromwkb'))
        fi
        if [[ "get" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'get'))
        fi
        if [[ "grid" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'grid'))
        fi
        if [[ "hausdorffdistance" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'hausdorffdistance'))
        fi
        if [[ "interiorpoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'interiorpoint'))
        fi
        if [[ "interpolatepoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'interpolatepoint'))
        fi
        if [[ "intersection" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'intersection'))
        fi
        if [[ "intersects" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'intersects'))
        fi
        if [[ "isccw" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isccw'))
        fi
        if [[ "isclosed" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isclosed'))
        fi
        if [[ "isempty" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isempty'))
        fi
        if [[ "isrectangle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isrectangle'))
        fi
        if [[ "isring" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isring'))
        fi
        if [[ "issimple" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'issimple'))
        fi
        if [[ "isvalid" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'isvalid'))
        fi
        if [[ "iswithindistance" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'iswithindistance'))
        fi
        if [[ "kochsnowflake" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'kochsnowflake'))
        fi
        if [[ "linemerge" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'linemerge'))
        fi
        if [[ "list" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'list'))
        fi
        if [[ "locatepoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'locatepoint'))
        fi
        if [[ "mincircle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'mincircle'))
        fi
        if [[ "minclearance" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'minclearance'))
        fi
        if [[ "mindiameter" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'mindiameter'))
        fi
        if [[ "minrect" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'minrect'))
        fi
        if [[ "nearestpoints" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'nearestpoints'))
        fi
        if [[ "node" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'node'))
        fi
        if [[ "normalize" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'normalize'))
        fi
        if [[ "octagonalenvelope" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'octagonalenvelope'))
        fi
        if [[ "overlaps" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'overlaps'))
        fi
        if [[ "placepoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'placepoint'))
        fi
        if [[ "pointatangle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'pointatangle'))
        fi
        if [[ "polygonize" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'polygonize'))
        fi
        if [[ "project" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'project'))
        fi
        if [[ "random" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'random'))
        fi
        if [[ "randomwalk" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'randomwalk'))
        fi
        if [[ "rectangle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'rectangle'))
        fi
        if [[ "reduceprecision" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'reduceprecision'))
        fi
        if [[ "reflect" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'reflect'))
        fi
        if [[ "relate" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'relate'))
        fi
        if [[ "reverse" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'reverse'))
        fi
        if [[ "rotate" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'rotate'))
        fi
        if [[ "scale" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'scale'))
        fi
        if [[ "shear" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'shear'))
        fi
        if [[ "sierpinskicarpet" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'sierpinskicarpet'))
        fi
        if [[ "similarity" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'similarity'))
        fi
        if [[ "simplify" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'simplify'))
        fi
        if [[ "sinestar" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'sinestar'))
        fi
        if [[ "slice" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'slice'))
        fi
        if [[ "snap" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'snap'))
        fi
        if [[ "split" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'split'))
        fi
        if [[ "spoke" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'spoke'))
        fi
        if [[ "squircle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'squircle'))
        fi
        if [[ "startpoint" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'startpoint'))
        fi
        if [[ "subline" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'subline'))
        fi
        if [[ "supercircle" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'supercircle'))
        fi
        if [[ "symdifference" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'symdifference'))
        fi
        if [[ "text" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'text'))
        fi
        if [[ "touches" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'touches'))
        fi
        if [[ "towkb" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'towkb'))
        fi
        if [[ "translate" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'translate'))
        fi
        if [[ "type" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'type'))
        fi
        if [[ "union" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'union'))
        fi
        if [[ "voronoi" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'voronoi'))
        fi
        if [[ "within" == "$nm"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W 'within'))
        fi
    fi
    return 0
} && complete -f -d -F _geom geom
